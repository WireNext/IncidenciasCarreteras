name: Build and Fetch DGT Data

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '*/15 * * * *'  # Ejecutar cada 15 minutos

permissions:
  contents: write  # Permite que el bot haga push en el repositorio

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java 17 (using Temurin distribution)
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Verify Maven installation
        run: mvn --version  # Verifica que Maven está correctamente instalado

      - name: Build with Maven
        run: mvn clean install  # Compila el proyecto y genera el archivo GeoJSON en la raíz

      - name: Commit GeoJSON file
        run: |
          # Configurar git para hacer commit
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Update GeoJSON file" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Usar el GITHUB_TOKEN generado automáticamente por GitHub

      - name: Check if GeoJSON file exists in the root directory
        run: |
          echo "Checking if incidencias.geojson exists in the root directory"
          ls -l  # Listar los archivos en la raíz del repositorio
          if [ ! -f incidencias.geojson ]; then
            echo "GeoJSON file does not exist!"
            exit 1  # Esto provocará un error si el archivo no existe
          else
            echo "GeoJSON file exists."
          fi

      - name: Upload GeoJSON as artifact
        uses: actions/upload-artifact@v3
        with:
          name: incidencias-geojson
          path: incidencias.geojson  # Asegúrate de que el archivo GeoJSON esté disponible después de la ejecución de Maven
